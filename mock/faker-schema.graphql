type Attribute {
  """Reads and enables pagination through a set of `Characteristic`."""
  characteristics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CharacteristicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CharacteristicsConnection! 
  createdAt: Datetime!
  id: Int!
  isApproved: Boolean
  name: String! @examples(values: ["size", "brand", "manufacturer", "material", "category", "subcategory", "type"])

  """Reads and enables pagination through a set of `Relationship`."""
  relationships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationshipsConnection!
  updatedAt: Datetime!
}

"""
A condition to be used against `Attribute` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttributeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `Attribute` values."""
type AttributesConnection {
  """
  A list of edges which contains the `Attribute` and cursor to aid in pagination.
  """
  edges: [AttributesEdge!]!

  """A list of `Attribute` objects."""
  nodes: [Attribute!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attribute` you could get from the connection."""
  totalCount: Int!
}

"""A `Attribute` edge in the connection."""
type AttributesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attribute` at the end of the edge."""
  node: Attribute!
}

"""Methods to use when ordering `Attribute`."""
enum AttributesOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Characteristic {
  """Reads a single `Attribute` that is related to this `Characteristic`."""
  attribute: Attribute
  attributeId: Int!
  createdAt: Datetime!

  """Reads a single `Option` that is related to this `Characteristic`."""
  option: Option
  optionId: Int!

  """Reads a single `Thing` that is related to this `Characteristic`."""
  thing: Thing
  thingId: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `Characteristic` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CharacteristicCondition {
  """Checks for equality with the object’s `attributeId` field."""
  attributeId: Int

  """Checks for equality with the object’s `optionId` field."""
  optionId: Int

  """Checks for equality with the object’s `thingId` field."""
  thingId: String
}

"""A connection to a list of `Characteristic` values."""
type CharacteristicsConnection {
  """
  A list of edges which contains the `Characteristic` and cursor to aid in pagination.
  """
  edges: [CharacteristicsEdge!]!

  """A list of `Characteristic` objects."""
  nodes: [Characteristic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Characteristic` you could get from the connection."""
  totalCount: Int!
}

"""A `Characteristic` edge in the connection."""
type CharacteristicsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Characteristic` at the end of the edge."""
  node: Characteristic!
}

"""Methods to use when ordering `Characteristic`."""
enum CharacteristicsOrderBy {
  ATTRIBUTE_ID_ASC
  ATTRIBUTE_ID_DESC
  NATURAL
  OPTION_ID_ASC
  OPTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  THING_ID_ASC
  THING_ID_DESC
}

input CreateThingInput {
  characteristics: [NewCharacteristicInput!]!
  ownerId: String!
  thingId: String!
}

type CreateThingPayload {
  query: Query
  thing: Thing
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Media {
  createdAt: Datetime!
  id: Int!
  mediaUrl: String! @fake(type: imageUrl)
  metadata: JSON

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection!
  updatedAt: Datetime!
}

"""
A condition to be used against `Media` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MediaCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""A connection to a list of `Media` values."""
type MediaConnection {
  """
  A list of edges which contains the `Media` and cursor to aid in pagination.
  """
  edges: [MediaEdge!]!

  """A list of `Media` objects."""
  nodes: [Media!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Media` you could get from the connection."""
  totalCount: Int!
}

"""A `Media` edge in the connection."""
type MediaEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Media` at the end of the edge."""
  node: Media!
}

"""Methods to use when ordering `Media`."""
enum MediaOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  createThing(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateThingInput!
  ): CreateThingPayload
}

input NewCharacteristicInput {
  attributeId: Int!
  optionId: Int!
}

type Option {
  """Reads and enables pagination through a set of `Characteristic`."""
  characteristics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CharacteristicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CharacteristicsConnection!
  createdAt: Datetime!
  id: Int!
  isApproved: Boolean

  """Reads and enables pagination through a set of `Relationship`."""
  relationships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationshipsConnection!
  updatedAt: Datetime!
  value: String! @fake(type: lorem, options: {loremSize: word})
}

"""
A condition to be used against `Option` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input OptionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""A connection to a list of `Option` values."""
type OptionsConnection {
  """
  A list of edges which contains the `Option` and cursor to aid in pagination.
  """
  edges: [OptionsEdge!]!

  """A list of `Option` objects."""
  nodes: [Option!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Option` you could get from the connection."""
  totalCount: Int!
}

"""A `Option` edge in the connection."""
type OptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Option` at the end of the edge."""
  node: Option!
}

"""Methods to use when ordering `Option`."""
enum OptionsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

enum PrivacyType {
  FRIENDS
  PRIVATE
  PUBLIC
}

"""The root query type which gives access points into the data universe."""
type Query {
  attribute(id: Int!): Attribute
  attributeByName(name: String!): Attribute

  """Reads and enables pagination through a set of `Attribute`."""
  attributes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttributeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attribute`."""
    orderBy: [AttributesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttributesConnection
  characteristic(attributeId: Int!, optionId: Int!, thingId: String!): Characteristic

  """Reads and enables pagination through a set of `Characteristic`."""
  characteristics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CharacteristicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CharacteristicsConnection
  media(id: Int!): Media

  """Reads and enables pagination through a set of `Media`."""
  medias(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaConnection
  option(id: Int!): Option

  """Reads and enables pagination through a set of `Option`."""
  options(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OptionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Option`."""
    orderBy: [OptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OptionsConnection
  relationship(attributeId: Int!, optionId: Int!): Relationship

  """Reads and enables pagination through a set of `Relationship`."""
  relationships(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelationshipCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Relationship`."""
    orderBy: [RelationshipsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RelationshipsConnection
  tag(mediaId: Int!, thingId: String!): Tag

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection
  thing(id: String!): Thing

  """Reads and enables pagination through a set of `Thing`."""
  things(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ThingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Thing`."""
    orderBy: [ThingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ThingsConnection
  user(id: String!): User
  userByUsername(username: String!): User
  userByWallet(wallet: String!): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

type Relationship {
  """Reads a single `Attribute` that is related to this `Relationship`."""
  attribute: Attribute
  attributeId: Int!
  createdAt: Datetime!

  """Reads a single `Option` that is related to this `Relationship`."""
  option: Option
  optionId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `Relationship` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelationshipCondition {
  """Checks for equality with the object’s `attributeId` field."""
  attributeId: Int

  """Checks for equality with the object’s `optionId` field."""
  optionId: Int
}

"""A connection to a list of `Relationship` values."""
type RelationshipsConnection {
  """
  A list of edges which contains the `Relationship` and cursor to aid in pagination.
  """
  edges: [RelationshipsEdge!]!

  """A list of `Relationship` objects."""
  nodes: [Relationship!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Relationship` you could get from the connection."""
  totalCount: Int!
}

"""A `Relationship` edge in the connection."""
type RelationshipsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Relationship` at the end of the edge."""
  node: Relationship!
}

"""Methods to use when ordering `Relationship`."""
enum RelationshipsOrderBy {
  ATTRIBUTE_ID_ASC
  ATTRIBUTE_ID_DESC
  NATURAL
  OPTION_ID_ASC
  OPTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Tag {
  createdAt: Datetime!

  """Reads a single `Media` that is related to this `Tag`."""
  media: Media
  mediaId: Int!

  """Reads a single `Thing` that is related to this `Tag`."""
  thing: Thing
  thingId: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `mediaId` field."""
  mediaId: Int

  """Checks for equality with the object’s `thingId` field."""
  thingId: String
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """A list of `Tag` objects."""
  nodes: [Tag!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag!
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  MEDIA_ID_ASC
  MEDIA_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  THING_ID_ASC
  THING_ID_DESC
}

type Thing {
  """Reads and enables pagination through a set of `Characteristic`."""
  characteristics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CharacteristicCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Characteristic`."""
    orderBy: [CharacteristicsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CharacteristicsConnection!
  createdAt: Datetime!
  id: String! @fake(type: uuid)
  metadata: JSON
  ownerId: String! @fake(type: firstName)
  privacyType: PrivacyType

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection!
  updatedAt: Datetime!
}

"""
A condition to be used against `Thing` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ThingCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: String

  """Checks for equality with the object’s `privacyType` field."""
  privacyType: PrivacyType
}

"""A connection to a list of `Thing` values."""
type ThingsConnection {
  """
  A list of edges which contains the `Thing` and cursor to aid in pagination.
  """
  edges: [ThingsEdge!]! @listLength(min: 1, max: 10)
  """A list of `Thing` objects."""
  nodes: [Thing!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Thing` you could get from the connection."""
  totalCount: Int!
}

"""A `Thing` edge in the connection."""
type ThingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Thing` at the end of the edge."""
  node: Thing!
}

"""Methods to use when ordering `Thing`."""
enum ThingsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRIVACY_TYPE_ASC
  PRIVACY_TYPE_DESC
}

type User {
  createdAt: Datetime!
  favoriteColor: String
  id: String!
  metadata: JSON
  name: String
  updatedAt: Datetime!
  username: String
  wallet: String
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `wallet` field."""
  wallet: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
  WALLET_ASC
  WALLET_DESC
}
